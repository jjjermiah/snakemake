name: CI With Pixi

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  # Cancel concurrent flows on PRs
  group: ci-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  ################################################################################################
  # Quality Check: Run linting using Ruff & Mypy
  ################################################################################################
  formatting:
    permissions:
      contents: read # for actions/checkout to fetch code
      pull-requests: write # for marocchino/sticky-pull-request-comment to create or update PR comment

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.3
        with:
          environments: "quality"
          pixi-version: v0.42.1
          cache: false # no pixi.lock
          locked: false

      - name: Run black
        run: pixi run -e quality format --check --diff .

      - name: Comment PR
        if: github.event_name == 'pull_request' && failure()
        uses: marocchino/sticky-pull-request-comment@v2.8.0
        with:
          message: "Please format your code with [black](https://black.readthedocs.io): `black snakemake tests/*.py`."
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  ################################################################################################
  # Testing: Run tests using Snakemake
  ################################################################################################
  Test-Suite:
    needs: formatting
    strategy:
      matrix:
        test_group: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

        os: [ubuntu-latest, windows-latest] #  macos-latest, macos-13,
        env: ["py311", "py312"]
        shell:
          - bash
          - dash # for py 3.12 also test dash as default shell (snakemake will still use bash for shell commands)
        exclude:
          - shell: dash
            os: windows-latest # Exclude `dash` on Windows
          - shell: dash
            env: "py311"

    runs-on: ${{ matrix.os }}

    env:
      AWS_AVAILABLE: "${{ secrets.AWS_ACCESS_KEY_ID }}"
      GCP_AVAILABLE: "${{ secrets.GCP_SA_KEY }}"

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Pixi
        uses: prefix-dev/setup-pixi@v0.8.3
        with:
          environments: ${{ matrix.env }}
          pixi-version: v0.42.1
          cache: false # no pixi.lock
          locked: false

      - name: Install Linux-Specific Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo add-apt-repository -y ppa:apptainer/ppa
          sudo apt-get update
          sudo apt install -y git wget openmpi-bin libopenmpi-dev apptainer dash

      # See https://github.com/apptainer/apptainer/pull/2262
      - name: Disable apparmor namespace restrictions for apptainer
        if: runner.os == 'Linux'
        run: |
          sudo sh -c 'echo kernel.apparmor_restrict_unprivileged_userns=0 \
              >/etc/sysctl.d/90-disable-userns-restrictions.conf'
          sudo sysctl -p /etc/sysctl.d/90-disable-userns-restrictions.conf

      - name: Setup MinIO (for AWS S3 testing)
        if: runner.os == 'Linux'
        uses: comfuture/minio-action@v1
        with:
          access_key: minio
          secret_key: minio123
          port: 9000

      - name: Test MinIO
        if: runner.os == 'Linux'
        run: |
          export AWS_ACCESS_KEY_ID=minio
          export AWS_SECRET_ACCESS_KEY=minio123
          export AWS_EC2_METADATA_DISABLED=true
          aws --endpoint-url http://127.0.0.1:9000/ s3 mb s3://test

      - name: Set Default Shell for Unix
        if: runner.os == 'Linux' && matrix.shell == 'dash'
        run: |
          sudo chsh -s /usr/bin/dash $(whoami)

      - name: Run Tests for Linux
        if: runner.os == 'Linux'
        shell: bash -el {0}
        env:
          CI: true
          ZENODO_SANDBOX_PAT: "${{ secrets.ZENODO_SANDBOX_PAT }}"
        run: |
          pixi run -e ${{ matrix.env }} \
            pytest -v -x --show-capture=stderr \
            --splits 10 --group ${{ matrix.test_group }} --splitting-algorithm=least_duration \
            tests/tests.py \
            tests/tests_using_conda.py \
            tests/test_expand.py \
            tests/test_io.py \
            tests/test_schema.py \
            tests/test_linting.py \
            tests/test_executor_test_suite.py \
            tests/test_api.py \
            tests/test_internals.py

      - name: Run Report Generation Tests (Only on Linux)
        if: runner.os == 'Linux'
        shell: bash -el {0}
        run: |
          cd tests/test_report
          snakemake --use-conda --cores 1 --report report.zip

      - name: Upload Report (Only for Dash on Test Group 1)
        if: runner.os == 'Linux' && matrix.shell == 'dash' && matrix.test_group == 1
        uses: actions/upload-artifact@v4
        with:
          name: report-${{ matrix.env }}.zip
          path: tests/test_report/report.zip

      - name: Run Tests for Windows
        if: runner.os == 'Windows'
        env:
          CI: true
          ZENODO_SANDBOX_PAT: "${{ secrets.ZENODO_SANDBOX_PAT }}"
        run: |
          python -m pytest --show-capture=stderr -v -x --splits 10 --group ${{ matrix.test_group }} --splitting-algorithm=least_duration tests/tests.py
